DROP TABLE IF EXISTS localidade CASCADE; 
CREATE TABLE IF NOT EXISTS localidade ( 
cep int NOT NULL, 
municipio varchar(100) NOT NULL, 
UF varchar(3) DEFAULT NULL, 
PRIMARY KEY (cep) 
);

DROP TABLE IF EXISTS zona_eleitoral CASCADE; 
CREATE TABLE IF NOT EXISTS zona_eleitoral ( 
codigo int NOT NULL,  
PRIMARY KEY (codigo)
);

DROP TABLE IF EXISTS eleitor CASCADE;
CREATE TABLE IF NOT EXISTS eleitor ( 
n_titulo int NOT NULL, 
nome varchar(255) NOT NULL, 
data_nascimento date NOT NULL, 
cep int NOT NULL REFERENCES localidade(cep), 
endereco int NOT NULL, 
sexo varchar(1) NOT NULL,
codigo_zona int NOT NULL REFERENCES zona_eleitoral(codigo), 
esta_ativo int NOT NULL DEFAULT '1', 
PRIMARY KEY (n_titulo)
);

DROP TABLE IF EXISTS eleicoes CASCADE; 
CREATE TABLE IF NOT EXISTS eleicoes ( 
id_eleicoes SERIAL, 
data_eleicao timestamp NOT NULL, 
turno int DEFAULT NULL, 
PRIMARY KEY (id_eleicoes) 
);

DROP TABLE IF EXISTS justificativa CASCADE;
CREATE TABLE IF NOT EXISTS justificativa ( 
id_justificativa SERIAL, 
n_titulo int NOT NULL REFERENCES eleitor(n_titulo), 
justificativa varchar(300) DEFAULT NULL, 
id_eleicoes int NOT NULL REFERENCES eleicoes(id_eleicoes), 
PRIMARY KEY (id_justificativa)
);

DROP TABLE IF EXISTS partido CASCADE; 
CREATE TABLE IF NOT EXISTS partido ( 
id_partido SERIAL, 
nome varchar(255) DEFAULT NULL UNIQUE, 
sigla varchar(10) DEFAULT NULL UNIQUE, 
legenda int DEFAULT NULL UNIQUE,
data_inicio timestamp NOT NULL,
data_fim timestamp,
PRIMARY KEY (id_partido)
);

DROP TABLE IF EXISTS cargo CASCADE; 
CREATE TABLE IF NOT EXISTS cargo ( 
id_cargo SERIAL, 
titulo varchar(100) NOT NULL, 
esfera varchar(10) NOT NULL, 
n_vagas int NOT NULL,
PRIMARY KEY (id_cargo) 
);

DROP TABLE IF EXISTS candidato CASCADE;  
CREATE TABLE IF NOT EXISTS candidato ( 
n_titulo int NOT NULL REFERENCES eleitor(n_titulo), 
numero int NOT NULL UNIQUE, 
apelido varchar(100) DEFAULT NULL, 
id_cargo int NOT NULL REFERENCES cargo(id_cargo), 
id_partido int NOT NULL REFERENCES partido(id_partido), 
PRIMARY KEY (n_titulo)
);

DROP TABLE IF EXISTS secao_eleitoral CASCADE; 
CREATE TABLE IF NOT EXISTS secao_eleitoral ( 
codigo_zona int NOT NULL REFERENCES zona_eleitoral(codigo), 
n_secao int NOT NULL, 
n_titulo_presidente int NOT NULL REFERENCES eleitor(n_titulo),
PRIMARY KEY (codigo_zona,n_secao)
);

DROP TABLE IF EXISTS ajudantes CASCADE; 
CREATE TABLE IF NOT EXISTS ajudantes ( 
codigo_zona int NOT NULL REFERENCES zona_eleitoral(codigo), 
n_secao int NOT NULL, 
n_titulo_ajudante int NOT NULL REFERENCES eleitor(n_titulo), 
PRIMARY KEY (codigo_zona,n_secao,n_titulo_ajudante)
);

DROP TABLE IF EXISTS voto_eleitor CASCADE; 
CREATE TABLE IF NOT EXISTS voto_eleitor ( 
n_eleitor int NOT NULL REFERENCES eleitor(n_titulo), 
votou int NOT NULL DEFAULT '0', 
id_eleicoes int NOT NULL REFERENCES eleicoes(id_eleicoes), 
PRIMARY KEY (n_eleitor, id_eleicoes)
);

DROP TABLE IF EXISTS local_zona_eleicao CASCADE;
CREATE TABLE IF NOT EXISTS local_zona_eleicao(
codigo_zona int NOT NULL REFERENCES zona_eleitoral(codigo),
cep int NOT NULL REFERENCES localidade(cep),
endereco int NOT NULL,
id_eleicoes int NOT NULL REFERENCES eleicoes(id_eleicoes),
PRIMARY KEY(codigo_zona, cep, id_eleicoes)
);

DROP TABLE IF EXISTS afiliacao CASCADE;
CREATE TABLE IF NOT EXISTS afiliacao(
id_afiliacao SERIAL UNIQUE,
n_titulo int NOT NULL REFERENCES candidato(n_titulo),
id_partido int NOT NULL REFERENCES partido(id_partido),
data_inicio timestamp NOT NULL,
data_fim timestamp,
PRIMARY KEY(n_titulo, id_partido, data_inicio)
);

DROP TABLE IF EXISTS candidatura CASCADE; 
CREATE TABLE IF NOT EXISTS candidatura ( 
id_candidatura int NOT NULL,
qtd int DEFAULT NULL, 
codigo_zona_eleitoral int NOT NULL REFERENCES zona_eleitoral(codigo), 
id_eleicoes int NOT NULL REFERENCES eleicoes(id_eleicoes), 
n_titulo_candidato int NOT NULL REFERENCES candidato(n_titulo),
id_afiliacao int NOT NULL REFERENCES afiliacao(id_afiliacao),
PRIMARY KEY (id_candidatura)
);

DROP TABLE IF EXISTS participacao_eleicao CASCADE;
CREATE TABLE IF NOT EXISTS participacao_eleicao(
id_candidatura int NOT NULL REFERENCES candidatura(id_candidatura),
id_candidato int NOT NULL REFERENCES candidato(n_titulo),
id_cargo int NOT NULL REFERENCES cargo(id_cargo),
id_partido int NOT NULL REFERENCES partido(id_partido),
PRIMARY KEY(id_candidatura, id_candidato, id_cargo, id_partido)
);

--Função 1

INSERT INTO localidade (cep, municipio, UF)
VALUES 
(24320000, 'Niterói', 'RJ'), 
(24230000, 'Niterói', 'RJ'), 
(24220000, 'Niterói', 'RJ'), 
(24020000, 'Niterói', 'RJ');

INSERT INTO zona_eleitoral (codigo)
VALUES (001), (003), (005);

INSERT INTO eleitor ( n_titulo, nome, data_nascimento, cep, endereco, sexo, codigo_zona, esta_ativo)
VALUES  
( 123456, 'Antonio do Nascimento', '1968-03-07', 24020000, '55', 'M', 001, 1),
( 234567, 'Marta Barbosa', '1985-12-09', 24220000, '13', 'F', 001, 1),
( 345678, 'Rita de Cassia Freitas', '1968-09-04', 24230000, '187', 'F', 003, 1),
( 456789, 'Vitor Costa', '1968-03-07', 24020000, '55', 'M', 001, 1),
( 567891, 'Mariana Werneck', '1968-03-07', 24020000, '55', 'F', 001, 1);

INSERT INTO secao_eleitoral (codigo_zona, n_secao, n_titulo_presidente)
VALUES 
(001, 318, 123456), 
(003, 325, 234567), 
(005, 310, 234567);

INSERT INTO partido (id_partido, nome, sigla, legenda, data_inicio, data_fim)
VALUES 
(DEFAULT, 'Partido dos trabalhadores', 'PT', 13, '1982-2-11 19:10:25-07', null),
(DEFAULT, 'Partido democratico trabalhista', 'PDT', 12, '1981-10-11 19:10:25-07', null);

INSERT INTO cargo (id_cargo, titulo, esfera, n_vagas)
VALUES (DEFAULT, 'Prefeito', 'a', 10);

INSERT INTO candidato (n_titulo, numero, apelido, id_cargo, id_partido)
VALUES 
(123456, 30, 'antonio', 5, 4),
(234567, 50, 'marta', 5, 5),
(345678, 60, ‘rita’, 5, 4),
(456789, 70, 'vitor', 5, 4),
(567891, 80, 'mariana', 5, 4);


INSERT INTO afiliacao (id_afiliacao, n_titulo, id_partido, data_inicio, data_fim)
VALUES 
(DEFAULT, 123456, 4, '2015-2-11 19:10:25-07', null),
(DEFAULT, 234567, 5, '2018-2-11 19:10:25-07', '2019-2-11 19:10:25-07'),
(DEFAULT, 345678, 4, '2015-2-11 19:10:25-07', '2017-2-11 19:10:25-07'), 
(DEFAULT, 456789, 4, '2016-2-11 19:10:25-07', '2018-2-11 19:10:25-07'),
(DEFAULT, 567891, 4, '2015-2-11 19:10:25-07', '2017-2-11 19:10:25-07');

CREATE OR REPLACE FUNCTION rel_homem_mulher(ano_inicio int, ano_fim int) 
RETURNS TABLE(
	partido_nome varchar(255),
	anos_rel int[],
	qtds_rel int[][]
) AS $$
DECLARE
	cur1 CURSOR FOR SELECT DISTINCT id_partido FROM afiliacao WHERE (ano_inicio <= EXTRACT(YEAR FROM data_inicio)) AND (ano_fim >= EXTRACT(YEAR FROM data_fim) OR data_fim IS null);
	qtd_h float;
	qtd_m float;
	porc_h int;
	anos int[];
	qtds int[][];
BEGIN
IF ano_inicio > ano_fim THEN
	RAISE EXCEPTION 'Intervalo inválido';
	RETURN;
END IF;

FOR r1 IN cur1 LOOP
	SELECT DISTINCT sigla INTO partido_nome FROM partido WHERE r1.id_partido = partido.id_partido;
	qtds = '{}';
	anos = '{}';
	FOR i IN ano_inicio..ano_fim LOOP
		SELECT COUNT(*) INTO qtd_h FROM eleitor INNER JOIN afiliacao ON eleitor.n_titulo = afiliacao.n_titulo WHERE id_partido = r1.id_partido AND sexo = 'M' AND (EXTRACT(YEAR FROM data_inicio) <= i) AND (EXTRACT(YEAR FROM data_fim) >= i OR data_fim IS null);
		SELECT COUNT(*) INTO qtd_m FROM eleitor INNER JOIN afiliacao ON eleitor.n_titulo = afiliacao.n_titulo WHERE id_partido = r1.id_partido AND sexo = 'F' AND (EXTRACT(YEAR FROM data_inicio) <= i) AND (EXTRACT(YEAR FROM data_fim) >= i OR data_fim IS null);
		IF(qtd_h+qtd_m > 0) THEN
			anos = anos || i;
			porc_h = (qtd_h / (qtd_h + qtd_m))*100;
			qtds = qtds || ARRAY[[porc_h, 100-porc_h]];
		END IF;
	END LOOP;
	anos_rel = anos;
	qtds_rel = qtds;
RETURN NEXT;
END LOOP;
END; 
$$ LANGUAGE 'plpgsql';

select rel_homem_mulher(2015, 2019);

-- Função 1



-- Assert 1

CREATE OR REPLACE FUNCTION contabilizacao_votos_zona_just() RETURNS trigger as $$
DECLARE
	zona_atual int;
	eleicao_atual int;
	qtd_pessoas_zona int;
	qtd_justificativas int;
	qtd_votos int;
BEGIN
	-- eleicao atual da justificativa nova
	eleicao_atual = new.id_eleicoes;
	-- zona atual da justificativa nova
	SELECT codigo_zona INTO zona_atual 
	FROM eleitor WHERE new.n_titulo = eleitor.n_titulo;
	-- qtd de pessoas cadastradas naquela zona eleitoral
	SELECT COUNT(n_titulo) INTO qtd_pessoas_zona FROM eleitor WHERE eleitor.codigo_zona = zona_atual;
	-- qtd de pessoas que justificaram naquela zona
	SELECT COUNT(id_justificativa) INTO qtd_justificativas 
	FROM justificativa INNER JOIN eleitor ON justificativa.n_titulo = eleitor.n_titulo 
	WHERE codigo_zona = zona_atual AND id_eleicoes = eleicao_atual;
	-- qtd de pessoas que votaram naquela zona
	SELECT COUNT(*) INTO qtd_votos 
	FROM voto_eleitor INNER JOIN eleitor ON voto_eleitor.n_eleitor = eleitor.n_titulo 
	WHERE codigo_zona = zona_atual AND id_eleicoes = eleicao_atual AND votou = 1;
	-- teste para saber se existem mais pessoas que o possível dentro do registro daquela zona
	
	RAISE NOTICE 'JUSTIFICATIVA';
	RAISE NOTICE 'zona %, eleicao %', zona_atual, eleicao_atual;
	RAISE NOTICE 'qtd de pessoas na zona %', qtd_pessoas_zona;
	RAISE NOTICE 'justificativas % e votos %', qtd_justificativas, qtd_votos;
	
	IF (qtd_justificativas + qtd_votos) >= qtd_pessoas_zona THEN
		RAISE EXCEPTION 'Você está tentando inserir mais pessoas do que a quantidade existente nessa zona eleitoral';
		RETURN null;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION contabilizacao_votos_zona() RETURNS trigger as $$
DECLARE
	zona_atual int;
	eleicao_atual int;
	qtd_pessoas_zona int;
	qtd_justificativas int;
	qtd_votos int;
BEGIN
	-- eleicao atual do voto novo
	eleicao_atual = new.id_eleicoes;
	-- zona atual da justificativa nova
	SELECT codigo_zona INTO zona_atual 
	FROM eleitor WHERE new.n_eleitor = eleitor.n_titulo;
	-- qtd de pessoas cadastradas naquela zona eleitoral
	SELECT COUNT(n_titulo) INTO qtd_pessoas_zona FROM eleitor WHERE eleitor.codigo_zona = zona_atual;
	-- qtd de pessoas que justificaram naquela zona
	SELECT COUNT(id_justificativa) INTO qtd_justificativas 
	FROM justificativa INNER JOIN eleitor ON justificativa.n_titulo = eleitor.n_titulo 
	WHERE codigo_zona = zona_atual AND id_eleicoes = eleicao_atual;
	-- qtd de pessoas que votaram naquela zona
	SELECT COUNT(*) INTO qtd_votos 
	FROM voto_eleitor INNER JOIN eleitor ON voto_eleitor.n_eleitor = eleitor.n_titulo 
	WHERE codigo_zona = zona_atual AND id_eleicoes = eleicao_atual AND votou = 1;
	-- teste para saber se existem mais pessoas que o possível dentro do registro daquela zona

	RAISE NOTICE 'VOTO';
	RAISE NOTICE 'zona %, eleicao %', zona_atual, eleicao_atual;
	RAISE NOTICE 'qtd de pessoas na zona %', qtd_pessoas_zona;
	RAISE NOTICE 'justificativas % e votos %', qtd_justificativas, qtd_votos;
	
	IF (qtd_justificativas + qtd_votos) >= qtd_pessoas_zona THEN
		RAISE EXCEPTION 'Você está tentando inserir mais pessoas do que a quantidade existente nessa zona eleitoral';
		RETURN null;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER contabilizacao_votos_just BEFORE INSERT OR UPDATE ON justificativa FOR EACH ROW EXECUTE PROCEDURE contabilizacao_votos_zona_just();
CREATE TRIGGER contabilizacao_votos BEFORE INSERT OR UPDATE ON voto_eleitor FOR EACH ROW EXECUTE PROCEDURE contabilizacao_votos_zona();

INSERT INTO localidade (cep, municipio, UF)
VALUES (24320000, 'Niterói', 'RJ'), (24230000, 'Niterói', 'RJ'), (24220000, 'Niterói', 'RJ'), (24020000, 'Niterói', 'RJ');

INSERT INTO zona_eleitoral (codigo)
VALUES (001), (003), (005);

INSERT INTO eleitor ( n_titulo, nome, data_nascimento, cep, endereco, sexo, codigo_zona, esta_ativo)
VALUES  
( 123456, 'Antonio do Nascimento', '1968-03-07', 24020000, '55', 'M', 001, 1),
( 234567, 'Marta Barbosa', '1985-12-09', 24220000, '13', 'F', 001, 1);

INSERT INTO eleicoes(id_eleicoes, data_eleicao, turno) 
VALUES (DEFAULT, '2019-06-06 19:10:25-07', 1);

INSERT INTO justificativa VALUES(DEFAULT, 123456, 'justificativa', 1);
INSERT INTO voto_eleitor VALUES(234567, 1, 1);
INSERT INTO justificativa VALUES(DEFAULT, 234567, 'justificativa de pessoa que ja votou', 1);
INSERT INTO voto_eleitor VALUES(123456, 1, 1);

-- Assert 1

